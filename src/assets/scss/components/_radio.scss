
@use "sass:map";
@use "./utils/all" as utils;
@use "./utils/variables" as vars;

/* @docs */
$radio-active-background-color: utils.variant-varname(map.get(vars.$theme-colors, "primary"),vars.$variant-degree) !default;
$radio-border-size: 2px !default;
$radio-border-radius: 50% !default;
$radio-font-size: 15px !default;
$radio-padding: .5em .75em !default;
$radio-control-label-padding-left: 11px !default;
// $radio
/* @docs */

.radio {
    display: inline-flex;
    justify-content: flex-start;
    align-items: center;
    //
    padding: $radio-padding;
    //
    position: relative;
    //
    vertical-align:top;

    .control-label {
        padding-left: $radio-control-label-padding-left;
        font-size: $radio-font-size;
    }
    .check {
        appearance: none;
        font-size: inherit;
        //
        border-radius: $radio-border-radius;
        border: 2px solid utils.variant-varname(map.get(vars.$theme-colors, "secondary"),vars.$variant-degree);
        //
        width: 1.25rem;
        height: 1.25rem;
        //
        flex-shrink: 0;
        //
        outline: none;
    }
    .check:hover {
        border: $radio-active-background-color 2px solid;
    }
    .check:focus {
        box-shadow: .1px .1px 10px $radio-active-background-color;
    }
    .check::before {
        content: '';
        transform: scale(0);
        //
        position: absolute;
        //
        background-color: $radio-active-background-color;
        //
        border: $radio-active-background-color 2px solid;
        border-radius: $radio-border-radius;
        //
        width: 1rem;
        height: 1rem;
        //
        transition: all vars.$speed-slow var(--ease-in);      
    }
    .check:checked {
        border: $radio-active-background-color 2px solid;
    }
    .check:checked::before {
        content: '';
        transform: scale(.6);
    }

    // Variant 
    @each $name, $variant in vars.$theme-colors {
        &.is-#{$name} {
            .check {
                border: 2px solid utils.variant-varname($variant,vars.$variant-degree);
            }
            .check:hover {
                border: utils.variant-varname($variant,vars.$variant-degree) 2px solid;
            }
            .check:focus {
                box-shadow: .1px .1px 10px utils.variant-varname($variant,vars.$variant-degree);
            }
            .check::before {
                content: '';
                background-color: utils.variant-varname($variant,vars.$variant-degree);
                border: utils.variant-varname($variant,vars.$variant-degree) 2px solid;
            }
            .check:checked {
                border: utils.variant-varname($variant,vars.$variant-degree) 2px solid;
            }
        }
    }

    // Size
    &.is-small {
        .control-label {
            font-size: 8px;
        }
        .check { 
            width: 1rem;
            height: 1rem;
        }
        .check::before {
            content: '';
            width: .7rem;
            height: .7rem;
        }
    }
    &.is-medium {
        .control-label {
            font-size: 12px;
        }
        .check { 
            width: 1.25rem;
            height: 1.25rem;
        }
        .check::before {
            content: '';
            width: 1rem;
            height: 1rem;
        }
    }
    &.is-large {
        .control-label {
            font-size: 20px;
        }
        .check { 
            width: 1.50rem;
            height: 1.50rem;
        }
        .check::before {
            content: '';
            width: 1.25rem;
            height: 1.25rem;
        }
    }

    &.is-disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
}